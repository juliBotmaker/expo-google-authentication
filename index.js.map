{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,2FAA2F;AAC3F,yDAAyD;AACzD,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAMxC,OAAO,EAAE,mCAAmC,EAAE,MAAM,qCAAqC,CAAC;AAC1F,OAAO,8BAA8B,MAAM,kCAAkC,CAAC;AAE9E,MAAM,UAAU,SAAS,CAAC,KAA6C;IACrE,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE,CAAC;QACvD,2CAA2C;QAC3C,8BAA8B,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;AACH,CAAC;AAED,MAAM,UAAU,KAAK;IACnB,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE,CAAC;QAC1B,OAAO,8BAA8B,CAAC,MAAM,EAAE,CAAC;IACjD,CAAC;SAAM,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE,CAAC;QACrC,OAAO,8BAA8B,CAAC,mBAAmB,EAAE,CAAC;IAC9D,CAAC;IAED,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,UAAU,CACZ,mCAAmC,CAAC,oBAAoB,EACxD,sBAAsB,CACvB,CACF,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,sBAAsB;IACpC,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE,CAAC;QAC1B,OAAO,8BAA8B,CAAC,MAAM,EAAE,CAAC;IACjD,CAAC;SAAM,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE,CAAC;QACrC,OAAO,8BAA8B,CAAC,sBAAsB,EAAE,CAAC;IACjE,CAAC;IAED,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,UAAU,CACZ,mCAAmC,CAAC,oBAAoB,EACxD,sBAAsB,CACvB,CACF,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,MAAM;IACpB,OAAO,8BAA8B,CAAC,MAAM,EAAE,CAAC;AACjD,CAAC;AAED,qBAAqB;AACrB,MAAM,OAAO,UAAW,SAAQ,KAAK;IACnC,IAAI,CAAS;IAEb,YAAY,IAAY,EAAE,OAAe;QACvC,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;CACF;AAED,OAAO,EAEL,mCAAmC,GAEpC,CAAC","sourcesContent":["// Import the native module. On web, it will be resolved to ExpoGoogleAuthentication.web.ts\n// and on native platforms to ExpoGoogleAuthentication.ts\nimport { Platform } from \"react-native\";\n\nimport {\n  ExpoGoogleAuthenticationConfigureProps,\n  ExpoGoogleAuthenticationLoginResponse,\n} from \"./ExpoGoogleAuthentication.types\";\nimport { ExpoGoogleAuthenticationStatusCodes } from \"./ExpoGoogleAuthenticationConstants\";\nimport ExpoGoogleAuthenticationModule from \"./ExpoGoogleAuthenticationModule\";\n\nexport function configure(props: ExpoGoogleAuthenticationConfigureProps): void {\n  if (Platform.OS === \"android\" || Platform.OS === \"ios\") {\n    // Configure is only necessary for Android.\n    ExpoGoogleAuthenticationModule.configure(props);\n  }\n}\n\nexport function login(): Promise<ExpoGoogleAuthenticationLoginResponse> {\n  if (Platform.OS === \"ios\") {\n    return ExpoGoogleAuthenticationModule.signIn();\n  } else if (Platform.OS === \"android\") {\n    return ExpoGoogleAuthenticationModule.loginFromUserAction();\n  }\n\n  return Promise.reject(\n    new CodedError(\n      ExpoGoogleAuthenticationStatusCodes.UNSUPPORTED_PLATFORM,\n      \"Unsupported platform\"\n    )\n  );\n}\n\nexport function loginWithoutUserIntent(): Promise<ExpoGoogleAuthenticationLoginResponse> {\n  if (Platform.OS === \"ios\") {\n    return ExpoGoogleAuthenticationModule.signIn();\n  } else if (Platform.OS === \"android\") {\n    return ExpoGoogleAuthenticationModule.loginWithoutUserAction();\n  }\n\n  return Promise.reject(\n    new CodedError(\n      ExpoGoogleAuthenticationStatusCodes.UNSUPPORTED_PLATFORM,\n      \"Unsupported platform\"\n    )\n  );\n}\n\nexport function logout(): Promise<any> {\n  return ExpoGoogleAuthenticationModule.logout();\n}\n\n// Export for testing\nexport class CodedError extends Error {\n  code: string;\n\n  constructor(code: string, message: string) {\n    super(message);\n    this.code = code;\n  }\n}\n\nexport {\n  ExpoGoogleAuthenticationConfigureProps,\n  ExpoGoogleAuthenticationStatusCodes,\n  ExpoGoogleAuthenticationLoginResponse,\n};\n"]}